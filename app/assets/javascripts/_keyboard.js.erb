//=require howler
//= require jquery
//= require jquery-ui
$(function(){

  $(document).on('click', '#scale', function(){
    $(".first").fadeOut();
    $(".scale-choices").fadeIn();
  });

  $(document).on('click', '#chord', function(){
    $(".first").fadeOut();
    $( ".chord-choices" ).fadeIn();
  });

  $(document).on('click', '.scale-back', function(){
    $(this).parent().slideUp("slow", function() {
    });
    $(".scale-button").fadeIn();
  });

  $(document).on('click', '.chord-back', function(){
    $(this).parent().slideUp("slow", function() {
    });
    $("#play-chord-button").fadeIn();
    $("#chord-identification").fadeIn();
  });

  $(document).on('click', ".chord-choice-back", function(){
    $("#chord-identification").fadeOut();
    $("#play-chord-button").fadeOut();
    $(".first").fadeIn();
  });

  $(document).on('click', '#play-scale-button', function(){
    $(".play-scales").fadeIn();
    $(".buttons").fadeOut();
  });

  $(document).on('click', '#play-chord-button', function(){
    $(".play-chord").fadeIn();
    $(".buttons").fadeOut();
  });

  $(document).on('click', '#chord-identification', function(){
    $(".buttons").fadeOut();
    $(".play-chord-id").fadeIn();
  });

  $(document).on('click', '#scale-identification', function(){
    $(".buttons").fadeOut();
    $(".play-scale-id").fadeIn();
  });


  var major = ['w', 'w', 'h', 'w', 'w', 'w', 'h'];
  var naturalMinor = ['w', 'h', 'w', 'w', 'h', 'w', 'w'];
  var harmonicMinor = ['w', 'h', 'w', 'w', 'h', 'w#', 'h'];
  var melodicMinor = ['w', 'h', 'w', 'w', 'w', 'w', 'h'];
  var minorPentatonicBlues = ['w#', 'w', 'h', 'h', 'w#', 'w'];
  var majorPentatonicBlues = ['w', 'h', 'h', 'w#', 'w', 'w#'];
  var majorPentatonic = ['w','w','w#','w','w#'];
  var minorPentatonic = ['w#','w','w','w#','w'];

  var majorTriad = ['1', '3', '5'];
  var minorTriad = ['1', '3m', '5'];
  var dominant7th = ['1', '3', '5', '7m'];
  var major7th = ['1', '3', '5', '7'];

  $(document).on('click', '.play-scale', function(){
      var rootNote = $('.play-scales .scale-root-selection').find(":selected").val();
      var rootNumber = $("[data-note= '" + rootNote + "']").data("key");
      var mode = $('.play-scales .scale-selection').find(":selected").val();
      var delay = 1;

      switch(mode){
          case "major": 
              playScale(major, rootNumber, delay);
              break;
          case "natural-minor":
              playScale(naturalMinor, rootNumber, delay);
              break;
          case "harmonic-minor":
              playScale(harmonicMinor, rootNumber, delay);
              break;
          case "melodic-minor":
              playScale(melodicMinor, rootNumber, delay);
              break;
          case "natural-minor":
              playScale(naturalMinor, rootNumber, delay);
              break;
          case "minor-pentatonic-blues":
              playScale(minorPentatonicBlues, rootNumber, delay);
              break;
          case "major-pentatonic-blues":
              playScale(majorPentatonicBlues, root2Number, delay);
              break;
          case "major-pentatonic":
              playScale(majorPentatonic, rootNumber, delay);
              break;
          case "minor-pentatonic":
              playScale(minorPentatonic, rootNumber, delay);
              break;
      }
  });
  var correct = true
  var randomChord = 0
  var randomRoot = 0
  var correctChord = ""
  var correctRoot = 0

  function listenChord(){
    var chord = ["major", "minor", "dominant7th", "major7th"];
    var root = ["1C", "1Cs", "1D", "1Ds", "1E", "1Fs", "1G", "1Gs", "2A", "2As", "2B"];
    if(correct == true){
     randomChord = getRandomInt(0,4);
     randomRoot = getRandomInt(0, 11);
    }
    correct = false;

    var rootNumber = $("[data-note= '" + root[randomRoot] + "']").data("key"); 
    switch(chord[randomChord]){
      case "major":
        playChord(majorTriad, rootNumber, 0);
        correctChord = "major"
        break;
      case "minor":
        playChord(minorTriad, rootNumber, 0);
        correctChord = "minor"
        break;
      case "dominant7th":
        playChord(dominant7th, rootNumber, 0);
        correctChord = "dominant7th"
        break;
       case "major7th":
        playChord(major7th, rootNumber, 0);
        correctChord = "major7th"
        break;
    }
    correctRoot = rootNumber
  }

  var correct2 = true
  var randomScale = 0
  var randomRootScale = 0
  var correctScale = ""
  var correctRootScale = 0

  function listenScale(){
    var mode = ["major", "natural-minor", "harmonic-minor", "melodic-minor", "minor-pentatonic-blues", "major-pentatonic-blues", "major-pentatonic", "minor-pentatonic"];
    var root = ["1C", "1Cs", "1D", "1Ds", "1E", "1Fs", "1G", "1Gs", "2A", "2As", "2B"];
    if(correct2 == true){
     randomScale = getRandomInt(0,8);
     randomRootScale = getRandomInt(0, 11);
    }
    correct2 = false;
    var delay = 1;

    var rootNumber = $("[data-note= '" + root[randomRootScale] + "']").data("key"); 
    switch(mode[randomScale]){
      case "major": 
        playScale(major, rootNumber, delay);
        correctScale = "major";
        break;

      case "natural-minor":
        playScale(naturalMinor, rootNumber, delay);
        correctScale = "natural-minor";
        break;

      case "harmonic-minor":
        playScale(harmonicMinor, rootNumber, delay);
        correctScale = "harmonic-minor";
        break;

      case "melodic-minor":
        playScale(melodicMinor, rootNumber, delay);
        correctScale = "melodic-minor";
        break;

      case "natural-minor":
        playScale(naturalMinor, rootNumber, delay);
        correctScale = "natural-minor";
        break;

      case "minor-pentatonic-blues":
        playScale(minorPentatonicBlues, rootNumber, delay);
        correctScale = "minor-pentatonic-blues";
        break;

      case "major-pentatonic-blues":
        playScale(majorPentatonicBlues, rootNumber, delay);
        correctScale = "major-pentatonic-blues";
        break;

      case "major-pentatonic":
        playScale(majorPentatonic, rootNumber, delay);
        correctScale = "major-pentatonic";
        break;

      case "minor-pentatonic":
        playScale(minorPentatonic, rootNumber, delay);
        correctScale = "minor-pentatonic";
        break;  
    }
    correctRootScale = rootNumber
    console.log(correctRootScale);
    console.log(correctScale);
  }



  $(document).on('click', '.listen-scale', function(){
    listenScale();
  });

  // List to chord identification
  $(document).on('click', '.listen', function(){
    listenChord();
  });
  //var currentScaleScore = 0; 
  //Guess chord identification
  $(document).on('click', '.guess-scale', function(){
    
    var rootNote = $('.play-scale-id .scale-root-selection').find(":selected").val();
    var rootNumber = $("[data-note= '" + rootNote + "']").data("key");
    var mode = $('.play-scale-id .scale-selection').find(":selected").val();
    var currentScaleScore = $(".current-score").data("scale");
    var highScaleScore = $(".high-score").data("scale");
    var url = $(".high-score").data("url");
    var id = $(".high-score").data("id");

    console.log("root " + rootNumber + " = " + correctRootScale );
    console.log("mode " + mode + " = " + correctScale);
    if(mode == correctScale && rootNumber == correctRootScale){
      correct2 = true;
      currentScaleScore += 1;
      $(".current-score").data("scale", currentScaleScore);
      $(".current-score").html(currentScaleScore);

      if(currentScaleScore > highScaleScore){
        $.ajax({ url: url,
                 type: "GET",
                dataType: "script",
                data: {scale_high_score: currentScaleScore,
                       id: id}
        });
      }

      //playChord(correctChord, rootNumber, 0);
      $(".correct").slideDown( 300 ).delay( 800 ).fadeIn( 400 );
      $(".correct").slideUp( 300 ).delay( 800 ).fadeOut( 400 );
      listenScale();
    } 
    else{
      $(".error").slideDown( 300 ).delay( 800 ).fadeIn( 400 );
      $(".error").slideUp( 300 ).delay( 800 ).fadeOut( 400 );
      $(".current-score").data("scale", 0);
      $(".current-score").html("0");
    }
    console.log(currentScaleScore);

  });

  //Guess chord identification
  $(document).on('click', '.guess-chord', function(){
    
    var rootNote = $('.play-chord-id .chord-root-selection').find(":selected").val();
    var rootNumber = $("[data-note= '" + rootNote + "']").data("key");
    var mode = $('.play-chord-id .chord-selection').find(":selected").val();
    var currentChordScore = $(".current-score-chord").data("chord");
    var highChordScore = $(".high-score-chord").data("chord");
    var url = $(".high-score-chord").data("url");
    var id = $(".high-score-chord").data("id");

    if(mode == correctChord && rootNumber == correctRoot){
      correct = true;
      $(".correct").slideDown( 300 ).delay( 800 ).fadeIn( 400 );
      $(".correct").slideUp( 300 ).delay( 800 ).fadeOut( 400 );
      listenChord();
      currentChordScore += 1;
      $(".current-score-chord").data("chord", currentChordScore);
      $(".current-score-chord").html(currentChordScore);

      console.log(currentChordScore + " =" + highChordScore);

      if(currentChordScore > highChordScore){
        $.ajax({ url: url,
                 type: "GET",
                 dataType: "script",
                 data: {chord_high_score: currentChordScore,
                       id: id}
        });
      }
    } 
    else{
      $(".error").slideDown( 300 ).delay( 800 ).fadeIn( 400 );
      $(".error").slideUp( 300 ).delay( 800 ).fadeOut( 400 );
      $(".current-score-chord").data("chord", 0);
      $(".current-score-chord").html("0");
    }
  });


  $(document).on('click', '.play-chord-button', function(){
    var rootNote = $('.play-chord .chord-root-selection').find(":selected").val();
    var rootNumber = $("[data-note= '" + rootNote + "']").data("key");
    var chord = $('.play-chord .chord-selection').find(":selected").val();
    switch(chord){
      case "major":
        playChord(majorTriad, rootNumber, 0);
        break;
      case "minor":
        playChord(minorTriad, rootNumber, 0);
        break;
      case "dominant7th":
        playChord(dominant7th, rootNumber, 0);
        break;
       case "major7th":
        playChord(major7th, rootNumber, 0);
        break;
    }
  });

  function playChord(chord, root, inversion){
    for (var i=0; i < chord.length; i++){
      var number = root;
      if(chord[i] == '1'){
        playNoteForChord($("[data-key= '" + root + "']"), 1);
      }
      else if(chord[i] == '3'){
        number += 4;
      }
      else if(chord[i] == '3m'){
        number += 3;
      }
      else if(chord[i] == '5'){
        number += 7;
      }
      else if(chord[i] == '7m'){
        number += 10;
      }
      else if(chord[i] == '7'){
        number += 11;
      }
      playNoteForChord($("[data-key= '" + number + "']"), 1);
    }
  }

  function playScale(scale, root, delay){
    var number = root;
    for(var i = 0; i < scale.length; i++){
        if (number == root){
          playNote($("[data-key= '" + root + "']"), delay);
            delay += 1;
        }

        if(scale[i] == "w"){
            number = number + 2;
        }
        else if(scale[i] == "h"){
            number += 1;
        }
        else{
            number += 3;
        }
        playNote($("[data-key= '" + number + "']"), delay);
        delay += 1;
    }
  }

  function playNote(div, delay){
    setTimeout(function() {
      var noteClick = $(div).attr('data-note');
      notes[noteClick].play();
      div.addClass('red');
    }, delay * 700);

    setTimeout(function(){
      div.removeClass('red');
   }, delay * 800);
  }



  function playNoteForChord(div, delay){
    setTimeout(function() {
      var noteClick = $(div).attr('data-note');
      notes[noteClick].playNote();
      div.addClass('red');
    }, delay);
 
   setTimeout(function(){
      div.removeClass('red');
   }, 1000);
  }

  // Notes variables
	var notes = {
    "1C": new Howl({
        urls: ["<%= asset_path('261-C.mp3') %>"]
    }),
    "1Cs": new Howl({
        urls: [ "<%= asset_path('277-C-sharp.mp3') %>" ]
    }),
    "1D": new Howl({
        urls: [ "<%= asset_path('293-D.mp3') %>" ]
    }),
    "1Ds": new Howl({
        urls: [ "<%= asset_path('311-D-sharp.mp3') %>" ]
    }),
    "1E": new Howl({
        urls: [ "<%= asset_path('329-E.mp3') %>" ]
    }),
    "1F": new Howl({
        urls: [ "<%= asset_path('349-F.mp3') %>" ]
    }),
    "1Fs": new Howl({
        urls: [ "<%= asset_path('369F-sharp.mp3') %>" ]
    }),
    "1G": new Howl({
        urls: [ "<%= asset_path('391-G.mp3') %>" ]
    }),
    "1Gs": new Howl({
        urls: [ "<%= asset_path('415-G-sharp.mp3') %>" ]
    }),
    "2A": new Howl({
        urls: [ "<%= asset_path('440-A.mp3') %>" ]
    }),
    "2As": new Howl({
        urls: [ "<%= asset_path('466-A-sharp.mp3') %>" ]
    }),
    "2B": new Howl({
        urls: [ "<%= asset_path('495-B.mp3') %>"  ]
    }),
    "2C": new Howl({
        urls: [ "<%= asset_path('523-C.mp3') %>" ]
    }),
    "2Cs": new Howl({
        urls: [ "<%= asset_path('545-C-sharp.mp3') %>" ]
    }),
    "2D": new Howl({
        urls: [ "<%= asset_path('587-D.mp3') %>" ]
    }),
    "2Ds": new Howl({
        urls: [ "<%= asset_path('622-D-sharp.mp3') %>" ]
    }),
    "2E": new Howl({
        urls: [ "<%= asset_path('659-E.mp3') %>" ]
    }),
    "2F": new Howl({
        urls: [ "<%= asset_path('698-F.mp3') %>" ]
    }),
    "2Fs": new Howl({
        urls: [ "<%= asset_path('698-F-sharp.mp3') %>" ]
    }),
    "2G": new Howl({
        urls: [ "<%= asset_path('783-G.mp3') %>" ]
    }),
    "2Gs": new Howl({
        urls: [ "<%= asset_path('830-G-sharp.mp3') %>" ]
    }),
    "3A": new Howl({
        urls: [ "<%= asset_path('880-A.mp3') %>" ]
    }),
    "3As": new Howl({
        urls: [ "<%= asset_path('932-A-sharp.mp3') %>" ]
    }),
    "3B": new Howl({
        urls: [ "<%= asset_path('987-B.mp3') %>" ]
    })
	};

	// Lock event for play
	var lockEvent = {};

	//
	// Events
	// --------------------------------------------------

	// Disable Select
	// --------------------------------------------------
	$('.piano').bind('selectstart dragstart', function(ev) {
	  ev.preventDefault();
	  return false;
	});

	// Piano Play Keyboard
    // --------------------------------------------------
	$(document).on('keydown keyup', function(ev) {
		var keyNo = ev.which;
    if(keyNo == 16){
      keyNo = 20;
    }
    var $key = $('[data-key-down="'+keyNo+'"]');
    var note = $key.attr('data-note');
    console.log(keyNo);
    console.log($key);
    console.log(note);

		if(note){
			if (ev.type == 'keydown') {
				if (!lockEvent[keyNo]) {
					notes[note].play();
					lockEvent[keyNo] = true;
					$key.addClass('active');
					$key.parent().addClass('active');
		 		}
			}
			else if (ev.type == 'keyup') {
				lockEvent[keyNo] = false;
				$key.removeClass('active');
				$key.parent().removeClass('active');
			}
		}
	});

	// Piano Play Click
  // --------------------------------------------------
	$(document).on('click','.key > div', function(){
		var me = $(this);
		var noteClick = me.attr('data-note');
    console.log(noteClick);
    notes[noteClick].play();
	});
});

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}